{"ast":null,"code":"function sortTransactionList(sortBy, transactions, sortStrategy) {\n  let transactionsCopy;\n  if (sortBy === \"category\" || sortBy === \"description\") {\n    transactionsCopy = [...transactions].sort((a, b) => {\n      if (a[sortBy].toLowerCase() > b[sortBy].toLowerCase()) {\n        return sortStrategy[sortBy];\n      } else if (a[sortBy].toLowerCase() < b[sortBy].toLowerCase()) {\n        return sortStrategy[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n  } else if (sortBy === \"amount\") {\n    transactionsCopy = [...transactions].sort((a, b) => {\n      if (a.amount > b.amount) {\n        return sortStrategy.amount;\n      } else if (a.amount < b.amount) {\n        return sortStrategy.amount * -1;\n      } else {\n        return 0;\n      }\n    });\n  } else if (sortBy === \"date\") {\n    transactionsCopy = [...transactions].sort((a, b) => {\n      const timeA = new Date(a.date).getTime();\n      const timeB = new Date(b.date).getTime();\n      if (timeA > timeB) {\n        return sortStrategy.date;\n      } else if (timeA < timeB) {\n        return sortStrategy.date * -1;\n      } else {\n        return 0;\n      }\n    });\n  }\n  return transactionsCopy;\n}\nfunction validateForm(formData) {\n  const formDetails = {\n    containsEmptyInput: false,\n    hasInvalidDate: true,\n    isInvalid: false\n  };\n  for (const inputData in formData) {\n    if (!formData[inputData]) {\n      formDetails.containsEmptyInput = true;\n      break;\n    }\n  }\n  const allowablePastDate = new Date(\"2019\").getTime();\n  const today = new Date().getTime();\n  const formDataDate = new Date(formData.date).getTime();\n  formDetails.hasInvalidDate = formDataDate < allowablePastDate ? true : formDataDate > today ? true : false;\n  formDetails.isInvalid = formDetails.containsEmptyInput || formDetails.hasInvalidDate || false;\n  return formDetails;\n}\nexport { sortTransactionList, validateForm };","map":{"version":3,"names":["sortTransactionList","sortBy","transactions","sortStrategy","transactionsCopy","sort","a","b","toLowerCase","amount","timeA","Date","date","getTime","timeB","validateForm","formData","formDetails","containsEmptyInput","hasInvalidDate","isInvalid","inputData","allowablePastDate","today","formDataDate"],"sources":["/home/oyier/Development/code/Phase2/code_challenges/bank-of-flatiron/src/components/Extras.js"],"sourcesContent":["function sortTransactionList(sortBy, transactions, sortStrategy){\n    let transactionsCopy \n    \n    if(sortBy === \"category\" || sortBy === \"description\"){\n      transactionsCopy = [...transactions].sort((a, b) => {\n        if(a[sortBy].toLowerCase() > b[sortBy].toLowerCase()){\n          return sortStrategy[sortBy]\n        }else if(a[sortBy].toLowerCase() < b[sortBy].toLowerCase()){\n          return sortStrategy[sortBy] * -1\n        }else {\n          return 0\n        }\n      })\n    }else if(sortBy === \"amount\"){\n      transactionsCopy = [...transactions].sort((a, b) => {\n        if(a.amount > b.amount){\n          return sortStrategy.amount\n        }else if(a.amount < b.amount){\n          return sortStrategy.amount * -1\n        }else {\n          return 0\n        }\n      })  \n    }else if(sortBy === \"date\"){\n      transactionsCopy = [...transactions].sort((a, b) => {\n        const timeA = (new Date(a.date)).getTime()\n        const timeB = (new Date(b.date)).getTime()\n\n        if(timeA> timeB){\n          return sortStrategy.date\n        }else if(timeA < timeB){\n          return sortStrategy.date * -1\n        }else {\n          return 0\n        }\n      })       \n    }\n\n    return transactionsCopy\n}\n\n\nfunction validateForm(formData){\n    const formDetails = {\n      containsEmptyInput:false,\n      hasInvalidDate:true,\n      isInvalid:false\n    }\n\n    for(const inputData in formData){\n      if(!formData[inputData]){\n        formDetails.containsEmptyInput = true\n        break\n      }\n    }\n\n    const allowablePastDate = (new Date(\"2019\")).getTime()\n    const today = (new Date()).getTime()\n    const formDataDate = (new Date(formData.date)).getTime()\n    formDetails.hasInvalidDate = formDataDate < allowablePastDate ? true : formDataDate > today ? true : false\n\n    formDetails.isInvalid = formDetails.containsEmptyInput || formDetails.hasInvalidDate || false\n\n    return formDetails;\n  }\n\nexport {sortTransactionList, validateForm}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}